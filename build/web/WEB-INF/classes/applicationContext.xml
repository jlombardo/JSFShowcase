<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    			http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security-3.1.xsd
                        http://www.springframework.org/schema/context 
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/jee 
                        http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
                        http://www.springframework.org/schema/tx 
                        http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
 
    
    <!-- use this to set a properties file location and provide access
         to key=value pairs via Spring EL expressions (see dataSource below).
         There are two reasons for doing this: 1) certain details can be configured
         outside of the application .war, such as port numbers; and 2) sensitive 
         information, such as a password, can be hidden from the developer of the app -->
    <context:property-placeholder location="file:/myappconfig/jdbc.config.properties"/>
    
    <!-- Scans within the base package of the application for @Components to configure as beans -->
    <context:component-scan base-package="edu.wctc.bean.demo5"/>
    <context:annotation-config/>

    <!-- begin Spring Security config -->
    <global-method-security secured-annotations="enabled" jsr250-annotations="enabled" />

    <http auto-config="true" access-denied-page="/faces/accessDenied.xhtml">
            
        <!-- On Glassfish, dev ports are 8080 and 8181, whereas on
             production its 80 and 443 -->
        <port-mappings>
            <port-mapping http="${http.port}" https="${https.port}"/>
        </port-mappings>

        <intercept-url 
            pattern="/faces/admin/**" 
            access="ROLE_ADMIN" requires-channel="https" />
        <intercept-url 
            pattern="/faces/member/**" 
            access="ROLE_MEMBER, ROLE_ADMIN" requires-channel="https" />
        <intercept-url 
            pattern="/**" 
            access="IS_AUTHENTICATED_ANONYMOUSLY" />
        
        <!-- Use O/S provided login window
        <http-basic />
        -->
        <!-- Use custom form for login -->
        <form-login 
            login-processing-url="/j_spring_security_check"
            login-page="/faces/login.xhtml" />
            
        <logout logout-success-url="/faces/index.xhtml" />

    </http>
 
    <authentication-manager alias="authenticationManager">
        <authentication-provider>
            <jdbc-user-service data-source-ref="dataSource" />
            <!-- if not using a database for accounts, hard-code them here
            <user-service>
                <user name="admin" password="????" authorities="ROLE_ADMIN" />
                <user name="member" password="????" authorities="ROLE_MEMBER" />
            </user-service>
            -->
        </authentication-provider>
    </authentication-manager>

    <!-- Server managed connection pool accessed via JNDI -->
    <jee:jndi-lookup id="dataSource" jndi-name="${jndi.name}"/>
    <!-- For web apps use the app server's transaction management capabilities, 
         but only when using the app server's connection pool. See the 
         Spring documentation for other types of transaction managers. -->
    <beans:bean id="txManager" class="org.springframework.transaction.jta.JtaTransactionManager" />
    <!-- enable the configuration of transactional behavior based on annotations -->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="false" />
        
    <!-- Prefer jndi access to server-managed connection pool (see above)
         Database connection properties defined in jdbc.config.properties file
         (see above) and accessed via Spring EL. Note that the users and authorities
         table schema are dictated by Spring (see Spring documentation) 
    <beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
      <beans:property name="driverClassName" value="${jdbc.driver.class}" />
      <beans:property name="url" value="${jdbc.url}" />
      <beans:property name="username" value="${jdbc.username}" />
      <beans:property name="password" value="${jdbc.password}" />
    </beans:bean>
    -->

    <!-- (Optional) Automatically receives and logs AuthenticationEvent messages -->
    <beans:bean id="loggerListener" class="org.springframework.security.authentication.event.LoggerListener"/>
    </beans:beans>